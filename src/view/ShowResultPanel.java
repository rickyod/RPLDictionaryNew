package view;

import java.awt.event.KeyEvent;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Axel
 */
public class ShowResultPanel extends javax.swing.JPanel {

    DictFrame d;

    /**
     * Creates new form ShowResultPanel
     */
    public ShowResultPanel(DictFrame d) {
        initComponents();
        this.d = d;
        logoutButton.setVisible(false);
        addButton.setVisible(false);
        editButton.setVisible(false);
        removeButton.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        wordTF = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        searchTF = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        logoutButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        definitionTA = new javax.swing.JTextArea();

        jButton1.setText("Logout");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        setMaximumSize(new java.awt.Dimension(500, 400));
        setMinimumSize(new java.awt.Dimension(500, 400));
        setPreferredSize(new java.awt.Dimension(500, 400));
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });
        setLayout(null);

        removeButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });
        add(removeButton);
        removeButton.setBounds(370, 340, 90, 23);

        editButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });
        add(editButton);
        editButton.setBounds(310, 340, 53, 23);

        wordTF.setEditable(false);
        wordTF.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        wordTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                wordTFKeyPressed(evt);
            }
        });
        add(wordTF);
        wordTF.setBounds(30, 130, 210, 30);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Word");
        add(jLabel1);
        jLabel1.setBounds(30, 110, 90, 15);

        searchTF.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        searchTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchTFKeyPressed(evt);
            }
        });
        add(searchTF);
        searchTF.setBounds(30, 60, 340, 30);

        searchButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        add(searchButton);
        searchButton.setBounds(390, 60, 70, 30);

        addButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        add(addButton);
        addButton.setBounds(250, 340, 55, 23);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Definition");
        add(jLabel2);
        jLabel2.setBounds(30, 180, 120, 15);

        logoutButton.setText("Logout");
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });
        add(logoutButton);
        logoutButton.setBounds(420, 10, 70, 23);

        definitionTA.setEditable(false);
        definitionTA.setColumns(20);
        definitionTA.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        definitionTA.setRows(5);
        definitionTA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                definitionTAKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(definitionTA);

        add(jScrollPane1);
        jScrollPane1.setBounds(30, 200, 430, 130);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Method saat remove button ditekan.
     * @param evt 
     */
    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        String removeTerm = wordTF.getText();
        if (d.controller.isExist(removeTerm)) {
            Object[] options = {"OK"};
            if (JOptionPane.showConfirmDialog(null, "Are you sure?", "Confirm removing term",
                    JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                d.controller.remove(removeTerm);
                this.search(searchTF.getText());
                this.wordTF.setText(removeTerm);
                JOptionPane.showOptionDialog(d, "Your term has been removed! ", "Success!", JOptionPane.PLAIN_MESSAGE, JOptionPane.QUESTION_MESSAGE,
                        null, options, options[0]);

            } else {
            }
        }
    }//GEN-LAST:event_removeButtonActionPerformed

    /**
     * Method saat add button ditekan.
     * @param evt 
     */
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        if (d.controller.isExist(this.wordTF.getText())) {
            d.add.setWordTF(this.wordTF.getText(), this.definitionTA.getText());
        } else {
            d.add.setWordTF(this.wordTF.getText(), "");
        }
        d.enter(3);
    }//GEN-LAST:event_addButtonActionPerformed

    /**
     * Method saat edit button ditekan.
     * @param evt 
     */
    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        String edit = wordTF.getText();
        if (d.controller.isExist(edit)) {
            String term = wordTF.getText();
            String definition = definitionTA.getText();
            d.edit.setterIsi(term, definition);
            d.enter(4);
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        d.enter(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * Method untuk melakukan search.
     * @param termSearch nama istilah yang ingin dicari
     */
    public void search(String termSearch) {
        if (d.controller.isExist(termSearch)) {
            wordTF.setText(termSearch);
            List<String> list = d.controller.search(termSearch);
            String res = "";
            for (int i = 0; i < list.size(); i++) {
                res += list.get(i);
                res += "\n\n";
            }
            definitionTA.setText(res);
            definitionTA.setLineWrap(true);
        } else {
            this.setNoDefinition(termSearch);
        }
        this.wordTF.setText(termSearch);
        searchTF.setText("");
    }
    
    /**
     * Method saat searc
     * @param evt 
     */
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        this.search(searchTF.getText());
    }//GEN-LAST:event_searchButtonActionPerformed

    /**
     * Method yang akan mengganti panel menjadi show result jika ingin mencari atau menjadi login jika menekan ctrl+shift+L.
     * @param evt 
     */
    private void searchTFKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTFKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            this.search(searchTF.getText());
        }
        if (!d.login.isLogin) {
            if (evt.isControlDown() && evt.isShiftDown() && evt.getKeyCode() == KeyEvent.VK_L) {
                d.enter(0);
            }
        }
    }//GEN-LAST:event_searchTFKeyPressed

    /**
     * Method untuk memunculkan panel login.
     * @param evt 
     */
    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        this.requestFocus();
        if (!d.login.isLogin) {
            if (evt.isControlDown() && evt.isShiftDown() && evt.getKeyCode() == KeyEvent.VK_L) {
                d.enter(0);
            }
        }
    }//GEN-LAST:event_formKeyPressed
    
    /**
     * Method saat logout button ditekan.
     * @param evt 
     */
    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        d.login.isLogin = false;
        logoutButton.setVisible(false);
        addButton.setVisible(false);
        removeButton.setVisible(false);
        editButton.setVisible(false);
        d.home.setLogoutButton(false);
        d.enter(1);
    }//GEN-LAST:event_logoutButtonActionPerformed

    /**
     * Method jika menekan ctrl+shift+L saat fokus ada di wordTF.
     * @param evt 
     */
    private void wordTFKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_wordTFKeyPressed
        if (!d.login.isLogin) {
            if (evt.isControlDown() && evt.isShiftDown() && evt.getKeyCode() == KeyEvent.VK_L) {
                d.enter(0);
            }
        }
    }//GEN-LAST:event_wordTFKeyPressed

    /**
     * Method jika menekan ctrl+shift+L saat fokus ada di definitionTA.
     * @param evt 
     */
    private void definitionTAKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_definitionTAKeyPressed
        if (!d.login.isLogin) {
            if (evt.isControlDown() && evt.isShiftDown() && evt.getKeyCode() == KeyEvent.VK_L) {
                d.enter(0);
            }
        }
    }//GEN-LAST:event_definitionTAKeyPressed

    /**
     * Method untuk mengubah definitionTA jika definisi tidak ditemukan.
     * @param termNameNoDefinition 
     */
    public void setNoDefinition(String termNameNoDefinition) {
        this.wordTF.setText(termNameNoDefinition);
        this.definitionTA.setText("Istilah yang Anda cari tidak dapat ditemukan!");
    }

    /**
     * Method untuk mengecek apakah dalam status login.
     */
    void checkedLogin() {
        if (d.login.isLogin) {
            logoutButton.setVisible(true);
            addButton.setVisible(true);
            editButton.setVisible(true);
            removeButton.setVisible(true);
        }
    }

    /**
     * Method untuk mendapatkan apa yang tertulis di word textfield.
     * @return isi wordTF
     */
    public String getWord() {
        return wordTF.getText();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JTextArea definitionTA;
    private javax.swing.JButton editButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton logoutButton;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchTF;
    private javax.swing.JTextField wordTF;
    // End of variables declaration//GEN-END:variables
}
