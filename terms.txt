Refinement
-
Penjelasan detil dari abstraction.
-
Membantu designer untuk memperlihatkan detil dari lowest level dari abstraction.
*
Software Project Scheduling
-
Pekerjaan yg mendistribusi perkiraan upaya pada durasi projek dengan cara mengalokasikan upaya pada rekayasa perangkat lunak 
*
Time-sharing
-
Satu komputer yang mampu mendukung banyak user dan meningkatkan keluaran (throughput) dari sistem 
*
SPS
-
Pekerjaan yg mendistribusi perkiraan upaya pada durasi projek dengan cara mengalokasikan upaya pada rekayasa perangkat lunak 
*
UML
-
Bahasa pemodelan di bidang rekayasa perangkat lunak , yang dirancang untuk menyediakan standar untuk memvisualisasikan desain sebuah sistem.
*
Prototyping
-
Biasanya digunakan sebagai bagian dari pemodelan proses yang lain, terutama untuk mengidentifikasi software requirements
*
Legacy software systems
-
Sistem perangkat lunak yang sudah sangat tua dan telah secara berkala diubah namun masih dipakai dalam dunia bisnis. 
*
SE stakeholders
-
Sekelompok orang-orang yang turut memengaruhi software engineering mulai dari pembuatan, pengembangan, sampai dengan penggunaan	
*
Modularity
-
Sebuah konsep untuk memecah program menjadi modul-modul kecil di mana masing-masing modul berinteraksi melalui antarmuka modul
*
concurrency
-
Proses-proses (lebih dari satu proses) yang terjadi pada saat bersamaan
*
Race condition
-
Situasi di mana beberapa proses mengakses dan memanipulasi data bersama pada saat bersamaan
*
Cohesion
-
Keterikatan fungsi-fungsi di dalam suatu modul.
*
swimlanes
-
Menggambarkan interaksi dari beberapa bagian yang berbeda yang terlibat dalam sebuah proses
*
OS
-
Software perangkat lunak yang memanage dan mengontrol aktivitas di komputer
*
Data Flow Diagram
-
Alat pembuatan model yang memungkinkan profesional sistem untuk menggambarkan sistem sebagai jaringan proses fungsional yang dihubungkan satu sama lain dengan alur data
*
fork
-
Jenis konkurensi di mana terdapat satu transisi yang masuk dan banyak transisi keluar
*
Closed Paradigm
-
Paradigma organisasi dengan struktur hirarki tradisional sehingga membuatnya terlalu birokratis
*
Optimization
-
Salah satu tujuan dari override untuk mengoptimalisasi kerja method 
*
Computer Aided Software Engineering
-
Pengotomasisasian dari methodologi untuk software dan pengembangan sistem untuk mengurangi jumlah pekerjaan yang diulang yang dibutuhkan oleh analis atau developer
*
Aggregation
-
Sebuah hubungan antara kelas-kelas objek dimana satu objek menggunakan objek lainnya
*
Project
-
Sebuah usaha yang difokuskan dalam mengebangkan atau memaintain sebuah software atau sistem. 
*
class variable
-
Atribut yang dimiliki oleh semua object yang berasal dari class yang sama, serta semua object memiliki nilai class variabel yang sama. atribut yang dimiliki object dari class yang sama.
*
Contigency
-
Keadaan di masa depan yang mungkin terjadi, tetapi tidak dapat diprediksi dengan pasti.
*
Simplicity
-
Pengambilan kasus pengujian yang umum dan mencakup garis besar kemampuan operasional perangkat lunak agar waktu pengujiannya singkat.
*
Abstraction
-
Sebuah hubungan antara kelas dengan kelas lainnya , dimana kelas yang berada di bawah kelas abstrak menjadi lebih kompleks.
*
Operability
-
Kemampuan software secara keseluruhan berjalan dalam kondisi sesuai dengan kebutuhan operasional yang telah ditentukan.
*
Encapsulation
-
Memisahkan aspek-aspek eksternal yang dapat di akses objek-objek lain dari rincian Implementasi objek itu sendiri
*
compatibility
-
Kemudahan menggabungkan elemen software dengan elemen software lainnya
-
Kemampuan yang dimiliki dua atau lebih sistem atau komponen untuk melakukan fungsi yang diperlukan dengan berbagi hardware atau software yang sama secara sementara
*
state diagram
-
Menggambarkan urutan keadaan yang dilalui object dalam suatu kelas, karena suatu kejadian menyebabkan suatu perpindahan aktivitas/state
*
Hardware
-
Peralatan komputer dan device yang digunakan untuk proses, store, atau physical computer 
*
white box testing
-
Pengujian yang didasarkan pada pengecekan terhadap detail perancangan, menggunakan struktur kontrol dari desain program secara procedural untuk membagi pengujian ke dalam beberapa kasus pengujian
*
Waterfall
-
Proses pemodelan dari software yang mengikuti alur proses software tersebut dari awal sampai akhir
*
Coupling
-
Cara dan tingkat dari ketergantungan antara modul software , semakin besar relasi antara modul , semakin besar coupling nya
*
SRS
-
Dokumen yang menjelaskan tentang berbagai kebutuhan yang harus dipenuhi oleh suatu software
*
adaptability
-
Adaptasi menyangkut perubahan sistem agar sesuai dengan kebutuhan pengguna tanpa harus mengubah dari satu komputer ke komputer lain
*
Algorithm
-
Kumpulan dari aturan-aturan yang telah didefinisikan dengan baik untuk solusi ke sebuah masalah dengan langkah yang terbatas
*
API
-
Seperangkat rutinitas , protokol , dan alat-alat untuk membangun aplikasi perangkat lunak.
*
Correctness
-
Kualitas dimana perangkat lunak melakukan pekerjaannya sesuai dengan yang sudah dispesifikasikan.
*
Pseudocode
-
Sebuah kombonasi dari bahasa pemograman dan bahasa natural yang digunakan untuk mendefinisikan sebuah algoritma
*
sofTware engineering
-
Proses pemecahan masalah dengan pengembangan sistematis dan evolusi dari sistem perangkat lunak yang besar dengan batasan biaya, waktu, dll. [Leithbridge&Laganiere]
-
Sebuah disiplin yang fokus pada pengembangan sistem software berkualitas tinggi yang irit biaya. [Sommerville]
-
IEEE: (1) pendekatan yang sistematis, disiplin, dan kuantitatif pada pengembangan, operasi, dan maintenance sebuah perangkat lunak. (2) Studi mengenai pendekatan pada nomor 1.
*
Buttom-up Design
-
Merupakan teknik pemecahan masalah yang berkebalikan dengan teknik Top-Down di mana penyelesaian masalah dimulai dari hal-hal yang bersifat khusus, kemudian naik ke bagian yang bersifat umum
*
rendezvous
-
Jenis konkurensi di mana terdapat banyak transisi yang masuk dan banyak transisi keluar
*
Antipattern
-
Sebuah pattern tertentu dalam pengembangan perangkat lunak yang dianggap pemrograman yang buruk. 
-
Forces
-
Hal yang perlu diperhatikan dan dipertimbangkan saat menyelesaikan sebuah masalah.
*
Observation
-
Teknik mengumpulkan informasi dengan mengamati langsung usernya saat di tempat kerja dan saat melakukan kegiatan sehari-hari
*
Generalisations
-
Sebuah hubungan antara suatu kelas yang menjadi umum dari kelas-kelas yang spesifik.
*
Interoperability
-
Bagaimana sebuah sistem software dapat dioperasikan di platform yang berbeda dengan platform yang digunakan saat pengujian pertama		
*
join
-
Jenis konkurensi di mana terdapat banyak transisi yang masuk dan satu transisi keluar
*
Brainstroming
-
Teknik mengumpulkan informasi dengan mengumpulkan ide terlebih dahulu, baik dengan cara voting, menulis keseluruhan ide dan membaginya, maupun dengan pertanyaan	
*
Obervability
-
Kemampuan untuk memberikan informasi tentang pengamatan hasil pengujian dari awal proses hingga proses berakhir.
*
Extension
-
Digunakan untuk membagi use case menjadi beberapa opsional (saat use case yang satu terjadi, use case yang lain bisa terjadi juga ataupun tidak)
*
DFD
-
Alat pembuatan model yang memungkinkan profesional sistem untuk menggambarkan sistem sebagai jaringan proses fungsional yang dihubungkan satu sama lain dengan alur data
*
pattern
-
Solusi umum yang dapat digunakan kembali pada permasalahan umum yang sering terjadi pada software design
*
Interview
-
Teknik pengumpulan informasi dengan cara memberikan sekumpulan pertanyaan kepada user secara langsung
*
ortogonal
-
Substate yang terjadi secara paralel
*
Source code
-
Instruksi pemrograman software yang tertulis dalam sebuah bahasa yang dapat dibaca oleh manusia yang harus ditranslasikan ke bahasa mesin sebelum bisa dieksekusi oleh komputer
*
Documentation
-
Informasi yang disediakan untuk membantu end-user dalam mengoperasikan aplikasi ini, atau membantu para developer untuk menemukan bug atau root dari sebuah method
*
activity diagram
-
Representasi grafis dari seluruh tahapan alur kerja
-
Diagram yg mengandung aktivitas, pilihan tindakan, perulangan dan hasil dari aktivitas tersebut
*
Robustness
-
Kualitas dimana perangkat lunak mampu menangani kondisi yang tidak normal bahkan kondisi yang ekstrem.
*
Efficiency
-
Kualitas dimana perangkat lunak secara efektif mampu melaksanakan tugasnya tanpa menghabiskan memory atau CPU time.
*
Design
-
Sebuah proses pemecahan masalah yang tujuannya mencari dan menjelaskan cara; untuk mengimplementasi kebutuhan fungsional sistem , sambil menghormati kendala yang diberikan oleh kualitas , platform dan kebutuhan proses , dan juga berpegang pada prinsip-prinsip umum dari kualitas yang baik.
*
Operating System
-
Software perangkat lunak yang memanage dan mengontrol aktivitas di komputer
*
Use case
-
Pendekatan sistematis untuk mendeskripsikan apa yang user harus bisa lakukan dengan sistem software yang dibuat
*
OCL
-
Sebuah bahasa deklaratif untuk menggambarkan aturan yang berlaku untuk model Unified Modeling Language (UML).
*
Reliability
-
Kualitas dimana perangkat lunak melakukan pekerjaannya tanpa gagal (crash).
*
sequence diagram
-
Suatu diagram yang menggambarkan interaksi antar obyek dan mengindikasikan komunikasi diantara obyek-obyek tersebut
*
Functional Req
-
Mendeskripsikan apa yang bisa atau harus dilakukan oleh sistem tersebut
*
Dependency
-
Sebuah hubungan ketergantungan antara kelas dan kelas lainnya.
*
Usability
-
Kualitas dimana user dapat mempelajari dan menggunakan perangkat lunak dengan cepat dan mudah.
*
Actuating
-
Bekerja sama pada saat pelaksanaan kegiatan untuk mencapai tujuan.
*
software
-
Instruksi (program komputer) yang ketika dieksekusi menghasilkan fitur, fungsi, dan performa yang diinginkan.
-
Struktur data yang memungkinkan program memanipulasi informasi.
-
Informasi deskriptif dalam bentuk hard copy maupun virtual yang mendeskripsikan cara penggunaan program.
*
Polymorphism
-
Kemampuan dari subclass untuk mengubah method superclass nya
*
Top-down Design
-
Merupakan teknik pemecahan masalah di mana suatu masalah yang kompleks dibagi-bagi menjadi beberapa struktur hingga unit yang paling kecil, setelah itu kemudian disusun langkah-langkah untuk menyelesaikan masalah secara rinci
*
Composition
-
Sebuah hubungan antara kelas-kelas objek dimana satu objek sangat berpengaruh dengan objek lainnya dan tidak akan berjalan tanpa objek tersebut.
*
flexibility
-
Menyediakan banyak cara bagi user dan sistem untuk bertukar informasi 
*
Restriction
-
Salah satu tujuan dari override untuk membatasi method 
*
Maintainability
-
Kualitas dimana perangkat lunak mudah diubah.
*
Assosiation
-
Sebuah hubungan antara kelas-kelas objek yang memungkinkan satu objek untuk melakukan sebuah aksi pada objek tersebut.
*
Throughput
-
Banyaknya pekerjaan yang dapat dikerjakan oleh sistem software dalam satu waktu
*
Failure
-
Ketidakmampuan sistem atau komponen untuk melaksanakan fungsi-fungsi yang diperlukan dalam kinerja ditentukan
*
Embedded software
-
Tipe perangkat lunak yang tertanam khusus untuk perangkat keras tertentu yang dijual di pasar.
*
Unified Modeling Language
-
Bahasa pemodelan di bidang rekayasa perangkat lunak , yang dirancang untuk menyediakan standar untuk memvisualisasikan desain sebuah sistem.
*
Decomposability
-
Membagi sebuah pengujian menjadi beberapa bagian yang lebih kecil dengan batasan yang jelas, sehingga masalah dapat lebih cepat terisolasi dan pengujian ulang dapat dilakukan dengan lebih baik.
*
State
-
Sekumpulan atribut dari sebuah objek
*
Stability
-
Sedikit perubahan yang terjadi pada perangkat lunak, sehingga tingkat terganggunya pengujian pun kecil.
*
Custom software
-
Tipe perangkat lunak yang dibuat secara khusus untuk memenuhi kebutuhan customer.
*
black box testing
-
Pengujian yang dilakukan hanya mengamati hasil eksekusi melalui data uji dan memeriksa fungsional dari perangkat lunak
*
Portability
-
Karakteristik sebuah perangkat lunak jika dapat digunakan pada sistem operasi lain, selain sistem operasi untuk pengerjaan perangkat lunak tersebut tanpa memerlukan perubahan besar pada perangkat lunak.
*
Object
-
Instansiasi dari kelas yang memiliki atribut dan perilaku
*
Non functional Req
-
Mendeskripsikan kualitas software atau sistem, seperti seberapa baik kinerja software tersebut atau seberapa lama respon dari software tersebut	
*
Reusability
-
Kualitas dimana bagian dari perangkat lunak dapat digunakan kembali di project lain agar tidak perlu diprogram ulang.
*
Compartmentalization
-
Membagi menjadi komponen yang lebih kecil dengan batas yang jelas untuk menyederhanakan tugas.
*
Understandibility
-
Kemudahan user untuk mengerti cara penggunaan perangkat lunak melalui buku panduan.
*
Parameter
-
Sebuah nilai yang diberikan ke sebuah aplikasi untuk mengarahkan peforma
*
Software Quality Assurance
-
Sebuah proses yang didesain untuk memberikan manajemen dengan visibilitas yang cukup ke proses rekayasa perangkat lunak yang sedang digunakan oleh tim projek
*
Actors
-
Merupakan user yang memiliki peran saat berinteraksi dengan sistem
*
Deadlock
-
Keadaan dimana dua program memegang kontrol terhadap sumber daya yang dibutuhkan oleh program yang lain. Tidak ada yang dapat melanjutkan proses masing-masing sampai program yang lain memberikan sumber dayanya, tetapi tidak ada yang mengalah
*
Interdependency
-
Ketergantungan antar komponen.
*
Generic software
-
Tipe perangkat lunak yang didesain untuk dijual di pasar terbuka.
*
Requirement
-
Sebuah kondisi atau kemampuan yang dibutuhkan oleh pengguna untuk menyelesaikan masalah atau mencapai sebuah tujuan
*
Error
-
Suatu program tidak dapat bekerja dengan optimal atau program yang salah dalam menjalankan suatu perintah
*
Object Constraint Language
-
Sebuah bahasa deklaratif untuk menggambarkan aturan yang berlaku untuk model Unified Modeling Language (UML).
*
Livelock
-
Situasi dimana dua atau lebih proses secara kontinu merubah state sebagai respon tanpa melakukan suatu pekerjaan
*
Controllability
-
Mengontrol keadaan sotware yang diperlukan untuk melakukan pengujian, agar pengujian dapat dioptimalkan.
*
Inheritance
-
Proses dimana kelas yang baru(subclass) dibentuk oleh kelas yang lain(superclass), dimana secara otomatis semua atribut dan method dari superclass di turunkan ke subclass
*
Inclusion
-
Untuk menspesifikasi use case yang umumnya merupakan bagian dari satu atau beberapa use case lain
*
Commercial off the Shelf
-
Tipe perangkat lunak yang didesain untuk dijual di pasar terbuka.
*
Application Programming Interface
-
Seperangkat rutinitas , protokol , dan alat-alat untuk membangun aplikasi perangkat lunak.
*
Specification
-
Dokumentasi yang mendeskripsikan syarat dari software, desain atau karakteristik lain dengan komplit, tepat, dan dapat diverifikasi
*
HTML
-
Sebuah alat programming yang menggunakan HyperText untuk menyambungkan link ke dokumen lain
*
Risk Mitigation
-
Pengambilan langkah-langkah atau keputusan untuk mengurangi risiko.
*
*****